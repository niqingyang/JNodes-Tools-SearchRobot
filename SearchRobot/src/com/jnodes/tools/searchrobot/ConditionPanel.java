/*
 * ConditionPanel.java
 *
 * Created on __DATE__, __TIME__
 */

package com.jnodes.tools.searchrobot;

import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.regex.Pattern;

import javax.swing.ComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JTextField;
import javax.swing.LabelCellRenderer;
import javax.swing.RichComboBoxUI;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang.StringUtils;

import com.jnodes.tools.searchrobot.util.Datas;
import com.jnodes.tools.searchrobot.util.EncodingUtil;
import com.jnodes.tools.searchrobot.util.PatternConstructor;
import com.jnodes.tools.searchrobot.util.SystemConfig;

/**
 * 
 * @author __USER__
 */
public class ConditionPanel extends javax.swing.JPanel {

	private static final long serialVersionUID = 1L;

	private static final String CONTENT_PRE = "content_";
	private static final String EXTENSION_PRE = "extension_";
	private static final String DIRECTORY_PRE = "directory_";

	/** Creates new form ConditionPanel */
	public ConditionPanel() {
		initComponents();
		
		this.lblContentText.setText(Messages.Cnd_ContentText);
		this.lblContentTextDesc.setText(Messages.Cnd_ContentText_Desc);
		this.lblFileName.setText(Messages.Cnd_FileName);
		this.lblFileNameDesc.setText(Messages.Cnd_FileName_Desc);
		this.lblDirectory.setText(Messages.Cnd_Directory);
		this.cbCase.setText(Messages.Cnd_Case);
		this.cbRegular.setText(Messages.Cnd_Regular);
		this.btnChoose.setText(Messages.Cnd_Choose);
		this.btnChooseDir.setText(Messages.Cnd_ChooseDir);
		
		Datas contentDatas = new Datas();
		Datas extensionDatas = new Datas();
		Datas directoryDatas = new Datas();

		Set<String> keySet = SystemConfig.getKeySet();
		for (String key : keySet) {
			String value = SystemConfig.getProperty(key);
			int index = 0;
			try {
				index = Integer.parseInt(key.substring(key.lastIndexOf("_") + 1));
			} catch (Exception e) {
				continue;
			}

			if (key.startsWith(CONTENT_PRE)) {
				contentDatas.add(index, value);
			} else if (key.startsWith(EXTENSION_PRE)) {
				extensionDatas.add(index, value);
			} else if (key.startsWith(DIRECTORY_PRE)) {
				directoryDatas.add(index, value);
			}
		}

		this.initComboBox(this.cbText, contentDatas);
		this.initComboBox(this.cbPatterns, extensionDatas);
		this.initComboBox(this.cbDirectory, directoryDatas);

	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	//GEN-BEGIN:initComponents
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		lblContentText = new javax.swing.JLabel();
		lblContentTextDesc = new javax.swing.JLabel();
		lblFileName = new javax.swing.JLabel();
		cbText = new javax.swing.JComboBox();
		cbPatterns = new javax.swing.JComboBox();
		cbCase = new javax.swing.JCheckBox();
		btnChoose = new javax.swing.JButton();
		cbRegular = new javax.swing.JCheckBox();
		lblFileNameDesc = new javax.swing.JLabel();
		lblDirectory = new javax.swing.JLabel();
		btnChooseDir = new javax.swing.JButton();
		cbDirectory = new javax.swing.JComboBox();

		setBackground(new java.awt.Color(255, 255, 255));

		lblContentText.setFont(new java.awt.Font("微软雅黑", 0, 14));
		lblContentText.setText("Containing text:");

		lblContentTextDesc.setFont(new java.awt.Font("微软雅黑", 0, 14));
		lblContentTextDesc.setText("(* = any string, ? = any character, \\ = escape for literals:* ? \\)");

		lblFileName.setFont(new java.awt.Font("微软雅黑", 0, 14));
		lblFileName.setText("File name patterns:");

		cbText.setEditable(true);
		cbText.setFont(new java.awt.Font("微软雅黑", 0, 14));
		cbText.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

		cbPatterns.setEditable(true);
		cbPatterns.setFont(new java.awt.Font("微软雅黑", 0, 14));
		cbPatterns.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "*.*" }));

		cbCase.setBackground(new java.awt.Color(255, 255, 255));
		cbCase.setFont(new java.awt.Font("微软雅黑", 0, 14));
		cbCase.setText("Case sensitive");

		btnChoose.setFont(new java.awt.Font("微软雅黑", 0, 14));
		btnChoose.setText("Choose...");

		cbRegular.setBackground(new java.awt.Color(255, 255, 255));
		cbRegular.setFont(new java.awt.Font("微软雅黑", 0, 14));
		cbRegular.setText("Regular Expression");

		lblFileNameDesc.setFont(new java.awt.Font("微软雅黑", 0, 14));
		lblFileNameDesc.setText("Patterns are separated by a comma (* = any string, ? = any character)");

		lblDirectory.setFont(new java.awt.Font("微软雅黑", 0, 14));
		lblDirectory.setText("Directory:");

		btnChooseDir.setFont(new java.awt.Font("微软雅黑", 0, 14));
		btnChooseDir.setText("Choose...");
		btnChooseDir.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				btnChooseDirMouseClicked(evt);
			}
		});

		cbDirectory.setEditable(true);
		cbDirectory.setFont(new java.awt.Font("微软雅黑", 0, 14));
		cbDirectory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
		this.setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(
								layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(lblContentText)
										.addComponent(lblFileName)
										.addGroup(
												javax.swing.GroupLayout.Alignment.TRAILING,
												layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(layout.createSequentialGroup().addComponent(lblContentTextDesc).addGap(119, 119, 119)).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup().addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING).addComponent(cbPatterns, javax.swing.GroupLayout.Alignment.LEADING, 0, 515, Short.MAX_VALUE).addComponent(cbText, 0, 515, Short.MAX_VALUE).addComponent(cbDirectory, javax.swing.GroupLayout.Alignment.LEADING, 0, 515, Short.MAX_VALUE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
														.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(cbRegular).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(btnChooseDir, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(btnChoose, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(cbCase, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))).addComponent(lblFileNameDesc).addComponent(lblDirectory))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				layout.createSequentialGroup().addContainerGap().addComponent(lblContentText).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(cbCase).addComponent(cbText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(lblContentTextDesc).addComponent(cbRegular)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED).addComponent(lblFileName).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnChoose).addComponent(cbPatterns, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(lblFileNameDesc).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(lblDirectory).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(btnChooseDir).addComponent(cbDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
						.addContainerGap(58, Short.MAX_VALUE)));
	}// </editor-fold>
	//GEN-END:initComponents

	/**
	 * 选择目录
	 */
	private void btnChooseDirMouseClicked(java.awt.event.MouseEvent evt) {
		JFileChooser fileChooser = new JFileChooser();

		// ExtensionFilter filter = new ExtensionFilter("字典表文件(*.xls)", ".xls");

		fileChooser.setAcceptAllFileFilterUsed(true);
		fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

		int option = fileChooser.showOpenDialog(this);
		if (JFileChooser.APPROVE_OPTION == option) {
			File file = fileChooser.getSelectedFile();
			String path = file.getAbsolutePath();
			this.cbDirectory.setSelectedItem(path);
		}

	}

	/**
	 * 获取包含的文本
	 */
	public Pattern getContentPattern() {

		JTextField text = (JTextField) this.cbText.getEditor().getEditorComponent();

		Object value = text.getText();

		if (value == null) {
			this.cbText.requestFocus();
			return null;
		}

		boolean isCaseSensitive = this.cbCase.isSelected();
		boolean isRegex = this.cbRegular.isSelected();
		Pattern pattern = null;

		if (StringUtils.isBlank(value.toString())) {
			pattern = PatternConstructor.createPattern("*", isCaseSensitive, isRegex);
		} else {
			pattern = PatternConstructor.createPattern("*" + value.toString() + "*", isCaseSensitive, isRegex);
		}

		return pattern;
	}

	/**
	 * 获取选择的目录路径
	 * 
	 * @return
	 */
	public String getDirectory() {
		if (this.cbDirectory.getSelectedItem() == null) {
			this.cbDirectory.requestFocus();
			return null;
		}
		return this.cbDirectory.getSelectedItem().toString();
	}

	/**
	 * 初始化
	 * 
	 * @param cb
	 * @param datas
	 */
	private void initComboBox(JComboBox cb, Datas datas) {

		cb.setRenderer(new LabelCellRenderer(cb));

		List<String> list = datas.getDataList();
		cb.removeAllItems();
		for (String value : list) {
			cb.addItem(value);
		}

	}

	private void addProperties(String prefix, JComboBox cb) {
		int index = 0;

		Set<String> set = new HashSet<String>();

		Set<String> keys = SystemConfig.getKeySet();

		for (String key : keys) {
			if (key.startsWith(prefix)) {
				SystemConfig.remove(key);
			}
		}

		for (int i = 0; i < cb.getItemCount(); i++) {
			String value = cb.getItemAt(i).toString();
			SystemConfig.put(prefix + index, value);
			set.add(value);
			index++;
		}

		String value = cb.getSelectedItem().toString();
		if (!set.contains(value)) {
			// value = StringUtils.replace(value, "\\", "/");
			cb.addItem(value);
			SystemConfig.put(prefix + index, value);
			index++;
		}

	}

	/**
	 * 缓存数据
	 */
	public void saveData() {

		this.addProperties(CONTENT_PRE, this.cbText);
		this.addProperties(EXTENSION_PRE, this.cbPatterns);
		this.addProperties(DIRECTORY_PRE, this.cbDirectory);

		SystemConfig.save();
	}

	/**
	 * 获取文件名匹配模式
	 * 
	 * @return
	 */
	public Pattern getFileNamePattern() {
		boolean isCaseSensitive = this.cbCase.isSelected();
		if (this.cbPatterns.getSelectedItem() == null) {
			this.cbPatterns.requestFocus();
			return null;
		}
		String value = this.cbPatterns.getSelectedItem().toString();
		String[] texts = value.split(",");
		Pattern pattern = PatternConstructor.createPattern(texts, isCaseSensitive);
		return pattern;
	}

	//GEN-BEGIN:variables
	// Variables declaration - do not modify
	private javax.swing.JButton btnChoose;
	private javax.swing.JButton btnChooseDir;
	private javax.swing.JCheckBox cbCase;
	private javax.swing.JComboBox cbDirectory;
	private javax.swing.JComboBox cbPatterns;
	private javax.swing.JCheckBox cbRegular;
	private javax.swing.JComboBox cbText;
	private javax.swing.JLabel lblContentText;
	private javax.swing.JLabel lblContentTextDesc;
	private javax.swing.JLabel lblDirectory;
	private javax.swing.JLabel lblFileName;
	private javax.swing.JLabel lblFileNameDesc;
	// End of variables declaration//GEN-END:variables

}